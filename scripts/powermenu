#!/usr/bin/julia

# ================================================================
#  _______    _______     ____    _______    _______    __    ___
# |__   __|  |   ____|   / _  \  |__   __|  |   ____|  |  \   | |
#    | |     |  |__     | | | |     | |     |  |__     |   \  | |
#    | |     |   __|    | | | |     | |     |   __|    | |\ \ | |
#    | |     |  |___    | |_| |     | |     |  |___    | | \ \| |
#    |_|     |______|    \____/     |_|     |______|   |_|  \___|
#
# ----------------------------------------------------------------
#
# Author: Manuel Teodoro Tenango
# Email: teotenn@proton.me
# Repo: https://github.com/teotenn/dotfiles_wayland
# License: GPL-3
#
# A wofi powermenu witten in Julia
#
# *** USAGE ***
# About Julia:
# This script is written in Julia, therefore, an installation of Julia
# is needed and the executable (or a symbolic link) should be in path
# of /usr/bin, otherwise change the line on top to your julia.
#
# The script was written and tested in Julia Version 1.9.3
#
# About the script:
# Change the var `use_this_conf` to your desired configuration.
#
# It uses slock to lock the system, it can be changed in the dict
# for any preferable method.
#
# To exit the current compositor, add methods in the section "Desktop"
# to the variable `how_to_exit`
#
# ================================================================

# Path to configuration
#use_this_conf = join([homedir(), "/Code/dotfiles_wayland/wofi/hor_conf"])
use_this_conf = join([homedir(), "/Code/dotfiles_wayland/fuzzel/powermenu.ini"])

# Desktop
desktop = readchomp(`echo $(ENV["DESKTOP_SESSION"])`)
if desktop == "sway"
    how_to_exit = `swaymsg exit`
elseif desktop == "hyprland"
    how_to_exit = `hyprctl dispatch exit 1`
else
    how_to_exit = `echo "No method"`
end

options = Dict(
    "⏻ Poweroff" => `systemctl poweroff`,
    "⟳ Reboot" => `systemctl reboot`,
    "-> 🔒 Lock" => `slock`,
    "-> ⏾ Suspend" => `systemctl suspend`,
    "⚠ Log Out" => how_to_exit,
)

uptime = readchomp(`uptime -p`)
#launcher_cmd = `wofi -d -p "$uptime" -c $use_this_conf -O alphabetical`
launcher_cmd = `fuzzel -d -p "$uptime" --config $use_this_conf`

vct_ops = join(sort(collect(keys(options))), "\n")
selected = read(pipeline(`echo $vct_ops`, launcher_cmd), String)
selected = replace(selected, r"\n" => "")
to_execute = options[selected]

run(`$to_execute`)
