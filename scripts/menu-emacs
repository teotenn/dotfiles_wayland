#!/usr/bin/julia

# ================================================================
#  _______    _______     ____    _______    _______    __    ___
# |__   __|  |   ____|   / _  \  |__   __|  |   ____|  |  \   | |
#    | |     |  |__     | | | |     | |     |  |__     |   \  | |
#    | |     |   __|    | | | |     | |     |   __|    | |\ \ | |
#    | |     |  |___    | |_| |     | |     |  |___    | | \ \| |
#    |_|     |______|    \____/     |_|     |______|   |_|  \___|
#
# ----------------------------------------------------------------
#
# Author: Manuel Teodoro Tenango
# Email: teotenn@proton.me
# Repo: https://github.com/teotenn/dotfiles_wayland
# License: GPL-3
#
# A rofi-style emacs menu witten in Julia
# Current version has options to work with fuzzel and wofi
#
# *** USAGE ***
# About Julia:
# This script is written in Julia, therefore, an installation of Julia
# is needed and the executable (or a symbolic link) should be in path
# of /usr/bin, otherwise change the line on top to your julia.
#
# The script was written and tested in Julia Version 1.9.3
#
# About Emacs:
# Most of the commands are Emacs defaults, except for the option 8
# which needs the function `client-save-kill-emacs` to be evaluated in
# your current session. See the notes at the end of the script for that.
#
# ================================================================

# Path to configuration
use_this_conf = join([homedir(), "/Code/dotfiles_wayland/fuzzel/fuzzel.ini"])

# Options
options = Dict(
    "1. emacsclient" => `emacsclient -c`,
    "2. emacs" => `emacs`,
    "3. emacs -q" => `emacs -q`,
    "4. nw emacsclient" => `x-terminal-emulator -e emacsclient -nw`,
    "5. nw emacs" => `x-terminal-emulator -e emacs -nw`,
    "6. nw emacs -q" => `x-terminal-emulator -e emacs -q -nw`,
    "7. debugging" => `emacs --debug-init`,
    "8. kill server" => `emacsclient -e '(client-save-kill-emacs)'`,
    "8.x. Force kill server" => `emacsclient -e '(kill-emacs)'`,
    "9. Start server" => `emacs --daemon`
)

menu = join(sort(collect(keys(options))), "\n")

#selected = read(pipeline(`echo $menu`, `wofi --show="dmenu" -i -O alphabetical`), String)
selected = read(pipeline(`echo $menu`, `fuzzel -d -i --config $use_this_conf`), String)

selected = replace(selected, r"\n" => "")
to_execute = options[selected]

run(`$to_execute`)


### ------------------------ END OF SCRIPT --------------------------------- ###
# NOTES
#
#=
*) The following code should be within your emacs init file or evaluated in the
  current emacs session for option 8 to work.
  Taken from:
  https://www.emacswiki.org/emacs/EmacsAsDaemon#h5o-10


(defun client-save-kill-emacs(&optional display)
  " This is a function that can bu used to save buffers and 
shutdown the emacs daemon. It should be called using 
emacsclient -e '(client-save-kill-emacs)'.  This function will
check to see if there are any modified buffers, active clients
or frame.  If so, an x window will be opened and the user will
be prompted."

  (let (new-frame modified-buffers active-clients-or-frames)

    ; Check if there are modified buffers, active clients or frames.
    (setq modified-buffers (modified-buffers-exist))
    (setq active-clients-or-frames ( or (> (length server-clients) 1)
					(> (length (frame-list)) 1)
				       ))  

    ; Create a new frame if prompts are needed.
    (when (or modified-buffers active-clients-or-frames)
      (when (not (eq window-system 'x))
	(message "Initializing x windows system.")
	(x-initialize-window-system))
      (when (not display) (setq display (getenv "DISPLAY")))
      (message "Opening frame on display: %s" display)
      (select-frame (make-frame-on-display display '((window-system . x)))))

    ; Save the current frame.  
    (setq new-frame (selected-frame))


    ; When displaying the number of clients and frames: 
    ; subtract 1 from clients (this client).
    ; subtract 2 from frames (the frame just created and the default frame.)
    (when (or (not active-clients-or-frames)
	       (yes-or-no-p (format "There are currently %d clients and %d frames. Exit anyway?" (- (length server-clients) 1) (- (length (frame-list)) 2)))) 
      
      ; If the user quits during the save dialog then don't exit emacs.
      ; Still close the terminal though.
      (let((inhibit-quit t))
             ; Save buffers
	(with-local-quit
	  (save-some-buffers)) 
	      
	(if quit-flag
	  (setq quit-flag nil)  
          ; Kill all remaining clients
	  (progn
	    (dolist (client server-clients)
	      (server-delete-client client))
		 ; Exit emacs
	    (kill-emacs))) 
	))

    ; If we made a frame then kill it.
    (when (or modified-buffers active-clients-or-frames) (delete-frame new-frame))
    )
  )


(defun modified-buffers-exist() 
  "This function will check to see if there are any buffers
that have been modified.  It will return true if there are
and nil otherwise. Buffers that have buffer-offer-save set to
nil are ignored."
  (let (modified-found)
    (dolist (buffer (buffer-list))
      (when (and (buffer-live-p buffer)
		 (buffer-modified-p buffer)
		 (not (buffer-base-buffer buffer))
		 (or
		  (buffer-file-name buffer)
		  (progn
		    (set-buffer buffer)
		    (and buffer-offer-save (> (buffer-size) 0))))
		 )
	(setq modified-found t)
	)
      )
    modified-found
    )
  )
#=
